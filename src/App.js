import './App.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import { Container, InputGroup, FormControl, Button, Row, Card } from 'react-bootstrap';
import { useState, useEffect } from 'react';

// Client Information For Spotify Authentication
const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;
const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;


function App() {
  const [accessToken, setAccessToken] = useState("");       //Token that is generated by spotify  after authentication
  const [rangeInput, setRangeInput] = useState("");         //Input for number of recommendations field
  const [artistInput, setArtistInput] = useState("");       //Input for seed artists
  const artistIdArray = [];                                 //Array of artist ID's of seed artists
  const [songInput, setSongInput] = useState("");           //Input for seed tracks
  const songIdArray = [];                                   //Array for song ID's of seed tracks
  let recommendations = [];                                 //Array for song ID's of generated recommendations
  const [GeneratedSongs, setGeneratedSongs] = useState([]); //Holds final song information of generated recommendations

  //Runs once on app start and sets the access token with the return value from the fetch request
  useEffect(() => {
    var authParameters = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: 'grant_type=client_credentials&client_id=' + CLIENT_ID + '&client_secret=' + CLIENT_SECRET
    }
    fetch('https://accounts.spotify.com/api/token', authParameters)
      .then(result => result.json())
      .then(data => setAccessToken(data.access_token))
  }, [])

  //Parameters for spotify get calls
  var searchParameters = {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + accessToken
    }
  }

  //generates song IDs using user input values
  async function generate() {
    recommendations = await fetch('https://api.spotify.com/v1/recommendations?limit=' + rangeInput + '&seed_artists=' + joinArtistID()
      + '&seed_tracks=' + joinSongID(), searchParameters)
      .then(response => response.json())
      .then(data => {
        for (let i = 0; i < rangeInput; i++) {
          recommendations[i] = data.tracks[i].id
        }
        return recommendations
      })

    getSongsFromRecommendations()
  }

  //Get's song information fron song ID's
  async function getSongsFromRecommendations() {
    let songsString = recommendations[0];

    for (let i = 1; i < recommendations.length; i++) {
      songsString += "%2C" + recommendations[i]
    }

    var returnedSongs = await fetch('https://api.spotify.com/v1/tracks?ids=' + songsString, searchParameters)
      .then(response => response.json())
      .then(data => { setGeneratedSongs(data.tracks) })

  }

  //Converts artist ID's into single string seperated by commas (%2C)
  function joinArtistID() {
    let result = artistIdArray[0];
    for (let i = 1; i < artistIdArray.length; i++) {
      result += '&2C' + artistIdArray[i]
    }
    return result
  }

  //Converts song ID's into single string seperated by commas (%2C)
  function joinSongID() {
    let result = songIdArray[0];
    for (let i = 1; i < songIdArray.length; i++) {
      result += '%2C' + songIdArray[i]
    }
    return result
  }

  //Converts inputted artist names into artist IDs
  async function artistSearch() {
    var artistArray = artistInput.split(',');

    for (let i = 0; i < artistArray.length; i++) {
      artistIdArray[i] = await fetch('https://api.spotify.com/v1/search?q=' + artistArray[i] + '&type=artist', searchParameters)
        .then(response => response.json())
        .then(data => { return data.artists.items[0].id })
    }
    console.log("Artist IDs " + artistIdArray);

  }

  //Converts inputted song names into song IDs
  async function songSearch() {
    var songAndArtistArray = songInput.split(',');

    for (let i = 0; i < songAndArtistArray.length; i++) {
      songIdArray[i] = await fetch('https://api.spotify.com/v1/search?q=' + songAndArtistArray[i] + '&type=track', searchParameters)
        .then(response => response.json())
        .then(data => { return data.tracks.items[0].id })
    }
    console.log("Song Id's " + songIdArray);

  }



  return (
    <div className='App' >
      <Container>
        <h1 style={{ color: '#1DB954', font: 'Helvetica' }}>Welcome To The Spotify Recommendations Generator!
        </h1>
        <div class="row">
          <div class="col-sm">
            <Row className='mx-2 row row-cols-1'>
              <div style={{ color: '#212121', font: 'Arial' }}>Fill Out The Following Fields To Get Recommendations:</div>
              {/* Range Input Field Start*/}
              <label style={{ color: '#FFFFFF', font: 'Arial' }}>Number Of Songs To Generate:</label>
              <InputGroup className='mb-3' size='lg'>
                <FormControl
                  style={{ color: '#212121', font: 'Arial', backgroundColor: '#b3b3b3' }}
                  placeholder='Integer Between 1-50'
                  type='input'
                  onChange={event => setRangeInput(event.target.value)}
                />
                <Button style={{ color: '#FFFFFF', font: 'Arial', backgroundColor: '#1DB954' }}>
                  Submit
                </Button>
              </InputGroup>
              {/* Range Input Field End*/}
              {/* Artist Input Field Start*/}
              <label style={{ color: '#FFFFFF', font: 'Arial' }}>Singers To Base Recommendations Off:</label>
              <InputGroup className='mb-3' size='lg'>
                <FormControl
                  style={{ color: '#212121', font: 'Arial', backgroundColor: '#b3b3b3' }}
                  placeholder='1-5 Singers (Ex. Diljit Dosanjh, Karan Aujla)'
                  type='input'
                  onKeyPress={event => {
                    if (event.key == "Enter") {
                      artistSearch();
                    }
                  }}
                  onChange={event => setArtistInput(event.target.value)}
                />
                <Button style={{ color: '#FFFFFF', font: 'Arial', backgroundColor: '#1DB954' }} onClick={artistSearch}>
                  Submit
                </Button>
              </InputGroup>
              {/* Artist Input Field End*/}
              {/* Song Input Field Start*/}
              <label style={{ color: '#FFFFFF', font: 'Arial' }}>Songs To Base Recommendations Off In form of (Song Artist):</label>
              <InputGroup className='mb-3' size='lg'>
                <FormControl
                  style={{ color: '#212121', font: 'Arial', backgroundColor: '#b3b3b3' }}
                  placeholder='1-5 Songs (Ex. G.O.A.T Diljit, Phulkari Balkar Sidhu)'
                  type='input'
                  onKeyPress={event => {
                    if (event.key == "Enter") {
                      songSearch();
                    }
                  }}
                  onChange={event => setSongInput(event.target.value)}
                />
                <Button style={{ color: '#FFFFFF', font: 'Arial', backgroundColor: '#1DB954' }} onClick={songSearch}>
                  Submit
                </Button>
              </InputGroup>
              {/* Song Input Field End*/}
              <Button style={{ color: '#FFFFFF', font: 'Arial', backgroundColor: '#1DB954' }} onClick={generate}>
                Generate!
              </Button>
            </Row>
          </div>
          <div class="col-sm">
            <Row className='mx-2 row row-cols-1'>
              {GeneratedSongs.map((song, i) => {
                return (
                  <Card>
                    <Card.Img src={song.album.images[0].url} />
                    <Card.Body>
                      <Card.Title>{song.name}</Card.Title>
                    </Card.Body>
                  </Card>
                )
              })}
            </Row>
          </div>
        </div>
      </Container>
    </div>
  );

}

export default App;